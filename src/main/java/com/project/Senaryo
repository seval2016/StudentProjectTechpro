STUDENT MANAGEMENT PROJECT KICK OFF DOCUMENT

Project Name: STUDENT MANAGEMENT WEB APPLICATION PROJECT

Definition: The Student-Management application is a web application which is able to manage
education directly by using a web browser in your computer, phone, tablet, or mobile device. There
will be different types of user in the Student-Management application. Users are able to login into
application.

STUDENT MANAGEMENT WEB APPLICATION CUSTOMER REQUIREMENTS

 1. Student-Management Application must be a web application.
     Öğrenci Yönetim Uygulaması bir web uygulaması olmalıdır.
 2. The application must have user friendly UI. (Non functional requirement)
     Uygulamanın kullanıcı dostu bir arayüzü olmalıdır. (İşlevsel olmayan gereklilik)
 3. The application must be secure. (Non functional requirement)
     Uygulama güvenli olmalıdır. (İşlevsel olmayan gereklilik)
 4. Language of the application must be English. (Non functional requirement)
     Uygulamanın dilinin İngilizce olması gerekmektedir. (İşlevsel olmayan gereklilik)
 5. The application must display response of user request nearby for 5 seconds. (Non functional requirement)
    Uygulama, kullanıcının isteğine yanıtı yaklaşık 5 saniye içinde göstermelidir. (İşlevsel olmayan gereklilik)
 6. Anonymous users who will make a process should be able to register this application with their own information
     Bir işlem yapacak olan anonim kullanıcılar, kendi bilgileri ile bu uygulamaya kayıt olabilmelidir.
 7. There should be able five types of roles for authorized user: Admin, Teacher, Student, Manager, Assistant Manager
    Yetkili kullanıcılar için beş farklı rol bulunmalıdır: Admin, Öğretmen, Öğrenci, Müdür, Yardımcı Müdür
 8. Each user can only have one role ( a user with the teacher role can also have the advisor teacher role at the same time)
     Her kullanıcı sadece bir role sahip olabilir (yalnız öğretmen rolüne sahip bir kullanıcı aynı zamanda danışman öğretmen rolüne de sahip olabilir)
 9. Registered user should be able to login to the application after registration
    Kayıtlı kullanıcılar kayıttan sonra uygulamaya giriş yapabilmelidir.
10. Authenticated user should be able to update its own user information
    Kimlik doğrulama yapılmış kullanıcı, kendi kullanıcı bilgilerini güncelleyebilmelidir.
11. Authenticated user should be able to update its own password
    Kimlik doğrulama yapılmış kullanıcı, kendi şifresini güncelleyebilmelidir.
12. User who has the admin role should be able to get all users’ information
    Admin rolüne sahip kullanıcı, tüm kullanıcı bilgilerini alabilmelidir.
13. User who has the Admin or Manager role should be able to get a user information
    Admin veya Müdür rolüne sahip kullanıcı, bir kullanıcı bilgisini alabilmelidir.
14. User who has the Admin or Manager or Assistant_Manager role should be able to update a teacher or student information
    Admin, Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, bir öğretmen veya öğrenci bilgisini güncelleyebilmelidir.
15. User who has the Admin role should be able to delete a user
    Admin rolüne sahip kullanıcı, bir kullanıcıyı silebilmelidir.
16. User who has the Manager role should be able to delete a user whoes role is Teacher or Student or Assistant_Manager
    Müdür rolüne sahip kullanıcı, Öğretmen, Öğrenci veya Yardımcı Müdür rolüne sahip bir kullanıcıyı silebilmelidir.
17. User who has the Assistant_Manager role should be able to delete a user whoes role is Teacher or Student
    Yardımcı Müdür rolüne sahip kullanıcı, Öğretmen veya Öğrenci rolüne sahip bir kullanıcıyı silebilmelidir.
18. User who has the Admin role should be able to update all user
    Admin rolüne sahip kullanıcı, tüm kullanıcıları güncelleyebilmelidir.
19. User who has the Manager or Assistant_Manager role should be able to update a user whoes role is Teacher or Student
    Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, Öğretmen veya Öğrenci rolüne sahip bir kullanıcıyı güncelleyebilmelidir.
20. User who has the Manager or Assistant_Manager role should be able to get a user by his/her name
    Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, bir kullanıcıyı adına göre alabilmelidir.
21. User who has the Manager or Assistant_Manager role should be able to add a lesson Program to a user whoes role is Teacher
    Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, Öğretmen rolüne sahip bir kullanıcıya ders programı ekleyebilmelidir.
22. User who has the Student role should be able to add a lesson Program to him/her
    Öğrenci rolüne sahip kullanıcı, kendi ders programını ekleyebilmelidir.
23. User who has the Admin or Manager or Assistant_Manager role should be able to get the status of user whoes role is Student.
    Admin, Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, Öğrenci rolüne sahip bir kullanıcının durumunu alabilmelidir.
24. User who has the Admin or Teacher role should be able to get informations of his/her students
    Admin veya Öğretmen rolüne sahip kullanıcı, kendi öğrencilerinin bilgilerini alabilmelidir.
25. User who has the Admin or Manager or Assistant_Manager role should be able to save AdvisorTeacher
    Admin veya Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, Danışman Öğretmeni kaydedebilmelidir.
26. User who has the Admin or Manager or Assistant_Manager role should be able to get all AdvisorTeachers
    Admin veya Müdür veya Yardımcı Müdür rolüne sahip kullanıcı, tüm Danışman Öğretmenleri alabilmelidir.

What is Use Case Diagram: In the Unified Modeling Language (UML), a use case diagram can
summarize the details of your system's users (also known as actors) and their interactions with the
system. A UML use case diagram is the primary form of system/software requirements for a new
software program underdeveloped. Use cases specify the expected behavior (what), and not the
exact method of making it happen (how). Use cases once specified can be denoted both textual and
visual representation (i.e. use case diagram). A key concept of use case modeling is that it helps us
design a system from the end user's perspective. It is an effective technique for communicating
system behavior in the user's terms by specifying all externally visible system behavior.

You will see usecase diagrams about StudentManagement project below :

Admin
---------------------
Create Users
Delete Users
getAllUsers
UpdateUsers
getUsersByName
addLessonProgramToTeacher
CRUD for Education Term
CRUD for Lesson & Lesson Program

Student
---------------------
getAllLessonProgram
getAllUnassignedLessonProgram
getAllAssignedLessonProgram
getAllLessonProgramByPage
getHisHerLessonProgram
getHisHerMeet
getHisHerLessonGrades

Teacher
---------------------
getAllLessonProgram
getAllUnassignedLessonProgram
getAllAssignedLessonProgram
getAllLessonProgramByPage
deleteMeet
saveMeet
updateMeet
getHisHerAllMeet
CRUD for StudentInfo

User - User Role
----------------
Student - Info - ETerm - Lesson Program - Lesson - Meet

User -> OneToOne   -> UserRole
User -> OneToMany  -> Student-Info
User -> ManyToMany -> Lesson-Program
User -> ManyToMany -> Meet

Lesson -> ManyToMany -> Lesson-Program

Lesson-Program -> ManyToMany -> Lesson
Lesson-Program -> ManyToOne  -> ETerm
Lesson-Program -> ManyToMany -> User

E.Term -> OneToMany -> Lesson-Program

Meet  -> ManyToMany -> User
Meet  -> ManyToOne -> User

Frontend: The part of a web site or web application that the user interacts with directly. In this
project, React Library will be used for frontend.

Backend: It is the server site the wep application. It stores and arranges data. It is the part of the
web app that you can't see and interact with. In this project, Sprint boot framework will be used as a
backend tecknology. Moreover PostgreSQL will be used as relational database.

DEVELOPMENT ENVIRONMENT, IDEs and TOOLS – INSTALLATIONS

1. FOR BACKEND
 Java 11 https://www.oracle.com/tr/java/technologies/javase/jdk11-archive-downloads.html
 Intellij IDE
 Postman https://www.postman.com/
 PostgreSQL 15 https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
Guide for installation POSTGRESQL: https://www.postgresqltutorial.com/installpostgresql/

THE TOPICS THAT YOU SHOULD REVIEW BEFORE STARTING PROJECT
FOR BACKEND (SPRING BOOT PROJECT)

1. Core Java: OOPS, classes, enums, interfaces, exception handling, collections, stream
(foreach, filter, map), lambda,optional key word and other fundamentals.
2. Logging (SLF4J, Logback)
3. Regular expressions
4. What is Spring Framework.
5. What is Spring Boot Framework
Graphic4 General system structure of the application
6. What is Spring Security Framework. (JWT Based Security)
7. What is inversion of control , dependency injection and Spring IOC Container
8. What is JPA, Hibernate and Spring Data JPA
9. What is entity class and how to create it
10. What are OneToOne, OneToMany, ManyToOne, ManyToMany relations on hibernate.
11. How to use @JoinTable, @JoinColum annotations.
12. JPQL (Java Persistence Query Language), Basic SQL knowledge
13. What is REST API
14. How , why to use @Bean, @Autowired, @RestController, @Service, @Repository
annotations.
15. Jackson annotations (@JsonIgnore, @JsonFormat etc.)
16. Controller-Service-Repository layered structure in spring boot app
17. What is @Transactional annotation in org.springframework.transaction.annotation
18. What is the Data Transfer Object and how to use it.
19. Usage of @ResponseEntity, @ResponseBody, @Request Body, @RequestMapping,
@PostMapping, @GetMapping, @DeleteMapping, @PutMapping. @Valid
 annotations.
20. HTTP Response Status Codes. (200, 201, 400, 404, etc.)
21. Why and How to use @PathVariable and @QueryParam annotations
22. Project Lombok
